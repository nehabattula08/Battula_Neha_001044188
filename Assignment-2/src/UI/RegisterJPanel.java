/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;



import java.io.BufferedReader;
import java.io.File;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;

import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import model.UberCar;

import model.UberList;
//import java.util.ArrayList;

/**
 *
 * @author 
 */
public class RegisterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateJPanel
     */
    UberList cars;
    UberCar uCar;
    UberCar ucar1=new UberCar();
    public RegisterJPanel(UberList cars,UberCar uCar) {
       
        initComponents();
         this.cars=cars;
         this.uCar=uCar;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupRadioButtonsPassenger = new javax.swing.ButtonGroup();
        buttonGroupavailability = new javax.swing.ButtonGroup();
        RegisterjLabel = new javax.swing.JLabel();
        carName = new javax.swing.JButton();
        carManufacturing = new javax.swing.JButton();
        CarManufacturerjLabel = new javax.swing.JLabel();
        passengerCar = new javax.swing.JButton();
        txtCarName = new javax.swing.JTextField();
        txtCarManufacturer = new javax.swing.JTextField();
        txtNoOfSeats = new javax.swing.JTextField();
        ManufacturingDate = new javax.swing.JButton();
        Seats = new javax.swing.JButton();
        SerialNo = new javax.swing.JButton();
        txtSerialNo = new javax.swing.JTextField();
        modelNo = new javax.swing.JButton();
        cityAvailability = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Submit = new javax.swing.JButton();
        yesPassengerRadioButton = new javax.swing.JRadioButton();
        noPassengerRadioButton = new javax.swing.JRadioButton();
        jYearChooser = new com.toedter.calendar.JYearChooser();
        carAvailability = new javax.swing.JButton();
        availabilityYes = new javax.swing.JRadioButton();
        availabilityNo = new javax.swing.JRadioButton();
        modelComboBox = new javax.swing.JComboBox<>();
        BostonCheckBox = new javax.swing.JCheckBox();
        NewJerseyCheckBox = new javax.swing.JCheckBox();
        DallasCheckBox = new javax.swing.JCheckBox();
        OregonCheckBox = new javax.swing.JCheckBox();
        JDateExp = new com.toedter.calendar.JDateChooser();
        btnUploadFile = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        RegisterjLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        RegisterjLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        RegisterjLabel.setText("     Register Car Details");
        RegisterjLabel.setPreferredSize(new java.awt.Dimension(140, 24));

        carName.setText("Car Name:");
        carName.setToolTipText("Enter car name");
        carName.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        carName.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        carName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carNameActionPerformed(evt);
            }
        });

        carManufacturing.setText("Car Manufacturer:");
        carManufacturing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carManufacturingActionPerformed(evt);
            }
        });

        passengerCar.setText("Is it a Passenger Car?");
        passengerCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passengerCarActionPerformed(evt);
            }
        });

        txtCarName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCarNameActionPerformed(evt);
            }
        });

        txtNoOfSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoOfSeatsActionPerformed(evt);
            }
        });

        ManufacturingDate.setText("Manufacturing Year");
        ManufacturingDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManufacturingDateActionPerformed(evt);
            }
        });

        Seats.setText("No of Seats");

        SerialNo.setText("Serial No");

        modelNo.setText("Model No.");

        cityAvailability.setText("Available Cities");
        cityAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityAvailabilityActionPerformed(evt);
            }
        });

        jButton2.setText("Maintainance Certificate Date");

        Submit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        buttonGroupRadioButtonsPassenger.add(yesPassengerRadioButton);
        yesPassengerRadioButton.setText("Yes");

        buttonGroupRadioButtonsPassenger.add(noPassengerRadioButton);
        noPassengerRadioButton.setText("No");
        noPassengerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noPassengerRadioButtonActionPerformed(evt);
            }
        });

        carAvailability.setText("Is the car available?");

        buttonGroupavailability.add(availabilityYes);
        availabilityYes.setText("Yes");

        buttonGroupavailability.add(availabilityNo);
        availabilityNo.setText("No");
        availabilityNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityNoActionPerformed(evt);
            }
        });

        modelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VX", "SUV", "HatchBack", "VI" }));
        modelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelComboBoxActionPerformed(evt);
            }
        });

        BostonCheckBox.setText("Boston");

        NewJerseyCheckBox.setText("New Jersey");

        DallasCheckBox.setText("Dallas");

        OregonCheckBox.setText("Oregon");

        btnUploadFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUploadFile.setText("Upload");
        btnUploadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(modelNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SerialNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passengerCar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(carManufacturing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(carName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Seats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ManufacturingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addComponent(CarManufacturerjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCarManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNoOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(yesPassengerRadioButton)
                                            .addComponent(availabilityYes))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(availabilityNo)
                                            .addComponent(noPassengerRadioButton))))
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(carAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2)
                                    .addComponent(cityAvailability))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(BostonCheckBox)
                                        .addGap(18, 18, 18)
                                        .addComponent(NewJerseyCheckBox))
                                    .addComponent(modelComboBox, 0, 165, Short.MAX_VALUE)
                                    .addComponent(JDateExp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUploadFile)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(DallasCheckBox)
                                        .addGap(18, 18, 18)
                                        .addComponent(OregonCheckBox)))))
                        .addGap(0, 154, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RegisterjLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(224, 224, 224)
                                .addComponent(txtCarName, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(274, 274, 274)
                                .addComponent(Submit)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(RegisterjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(carName)
                    .addComponent(txtCarName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carManufacturing)
                    .addComponent(CarManufacturerjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCarManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passengerCar)
                    .addComponent(yesPassengerRadioButton)
                    .addComponent(noPassengerRadioButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carAvailability)
                    .addComponent(availabilityYes)
                    .addComponent(availabilityNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ManufacturingDate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jYearChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Seats)
                    .addComponent(txtNoOfSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SerialNo)
                    .addComponent(txtSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modelNo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(modelComboBox)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityAvailability)
                    .addComponent(DallasCheckBox)
                    .addComponent(OregonCheckBox)
                    .addComponent(BostonCheckBox)
                    .addComponent(NewJerseyCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(JDateExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Submit)
                    .addComponent(btnUploadFile))
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void carNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_carNameActionPerformed

    private void carManufacturingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carManufacturingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_carManufacturingActionPerformed

    private void ManufacturingDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManufacturingDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ManufacturingDateActionPerformed

  /*  public void nullCheck(UberCar car){
        
        if(car==null){
                           
            JOptionPane.showMessageDialog(this, "Some fields are null");
        
        }
    }*/
    
    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        // TODO add your handling code here:
      try{  
       UberCar car1= cars.addNewCar();
       int flag=1;
       
       if((txtCarName.getText()==null)|| (txtCarName.getText().trim().isEmpty())){
           JOptionPane.showMessageDialog(null,"Please enter a valid car name");   
           flag=0;
       }
       
       if((txtCarManufacturer.getText()==null)|| (txtCarManufacturer.getText().trim().isEmpty())){
           JOptionPane.showMessageDialog(null,"Please enter a valid car manufacturer");   
           flag=0;
       }
       
       
       
       List<String> availableCities = new ArrayList<>();
       //check box validation
       if(BostonCheckBox.isEnabled()==false&&NewJerseyCheckBox.isEnabled()==false&&DallasCheckBox.isEnabled()==false
               &&OregonCheckBox.isEnabled()==false){
             JOptionPane.showMessageDialog(null,"Please enable atleast 1 check box");   
             flag=0;
       }
       
       else{
        if(BostonCheckBox.isSelected()==true){
              availableCities.add("Boston");
        } 
       
        if(NewJerseyCheckBox.isSelected()==true){
             availableCities.add("New Jersey");
        }
       
        if(DallasCheckBox.isSelected()==true){
          availableCities.add("Dallas");
        }
       
        if(OregonCheckBox.isSelected()==true){
              availableCities.add("Oregon");
        }
      } 
       
       car1.setAvailableCities(availableCities);
       
        //Boolean to check whether a car is available
        //radio button validation
        if((availabilityYes.isSelected()==false)&&(availabilityNo.isSelected()==false)){
             JOptionPane.showMessageDialog(null,"Please enable atleast 1 radio button for car availability");   
             flag=0;
        }
        
      
      
      
        //passenger check radio button validation
        
        if((yesPassengerRadioButton.isSelected()==false)&&(noPassengerRadioButton.isSelected()==false)){
             JOptionPane.showMessageDialog(null,"Please enable atleast 1 radio button for passenger car availability");   
             flag=0;
        }
            
         
         if((txtNoOfSeats.getText()==null)|| (txtNoOfSeats.getText().trim().isEmpty())){
           JOptionPane.showMessageDialog(null,"Please enter a valid seat number");   
           flag=0;
       }
       
           if((txtSerialNo.getText()==null)|| (txtSerialNo.getText().trim().isEmpty())){
           JOptionPane.showMessageDialog(null,"Please enter a valid serial number");   
           flag=0;
       }
           
        int year= jYearChooser.getYear();
        //To check whether a car is a passenger car or not
      
          
        if(yesPassengerRadioButton.isSelected()==true)
            car1.setIsPassengerCarAvailable("Yes");
            
        
        else{
           
            car1.setIsPassengerCarAvailable("No");
            
        
        }
        
         if(availabilityYes.isSelected()==true)
           car1.setCarAvailability("Yes");
       else
           car1.setCarAvailability("No");
       
       //no validation for combo box
        car1.setModelNumber(modelComboBox.getSelectedItem().toString());
      
        car1.setCarName(txtCarName.getText());
        car1.setCarManufacture(txtCarManufacturer.getText()); 
        car1.setManufactureYear(year);  
        car1.setNoOfSeats(Integer.parseInt(txtNoOfSeats.getText()));
        car1.setSerialNumber(Long.parseLong(txtSerialNo.getText()));
        car1.setMaintenanceCertDate(JDateExp.getDate());
        
        //in collections for displaying last updated time
        LocalDateTime now= LocalDateTime.now();  
        cars.setCurr_dt(now);
        
        if(flag==1){
         JOptionPane.showMessageDialog(this,"New car added.");
        }
        
        txtCarName.setText("");
        txtCarManufacturer.setText("");
        availabilityYes.setText("");
        txtNoOfSeats.setText("");
        
        txtSerialNo.setText("");
        JDateExp.setCalendar(null);
        
      }
      catch(Exception e){
          JOptionPane.showMessageDialog(this, e.getMessage());
      }
        
    }//GEN-LAST:event_SubmitActionPerformed

    private void txtNoOfSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNoOfSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNoOfSeatsActionPerformed

    private void noPassengerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noPassengerRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noPassengerRadioButtonActionPerformed

    private void passengerCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passengerCarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passengerCarActionPerformed

    private void modelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modelComboBoxActionPerformed

    private void txtCarNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCarNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCarNameActionPerformed

    private void availabilityNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availabilityNoActionPerformed

    private void cityAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityAvailabilityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityAvailabilityActionPerformed

    private void btnUploadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadFileActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = file.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
        File selectedFile = file.getSelectedFile();
        ucar1.setFilePath(selectedFile.getAbsolutePath());
        try (BufferedReader br = Files.newBufferedReader(Paths.get(ucar1.getFilePath()),
                StandardCharsets.US_ASCII)){
                String line = br.readLine();
                while (line != null){
                    String[] attributes = line.split("//");
                    if(attributes.length==10){
                        for(UberCar car: cars.getCars()){
                            if(car.getSerialNumber()==Long.parseLong(attributes[6].trim())){
                                JOptionPane.showMessageDialog(this,"Entry with "+Long.parseLong(attributes[6].trim())+"                                     serial number already exist." );
                                return;
                            }                  
                        }
                        var car=cars.addNewCar();
                        car.setCarName(attributes[0].trim());
                        if(attributes[2].toLowerCase().trim().equals("yes")){
                            car.setIsPassengerCarAvailable("Yes");
                        }
                        else{
                            car.setIsPassengerCarAvailable("No");
                        }
                        
                        if(attributes[3].toLowerCase().trim().equals("yes")){
                            car.setCarAvailability("Yes");
                        }
                        else{
                            car.setCarAvailability("No");
                        }
                        car.setCarManufacture(attributes[1].trim());
                        car.setManufactureYear(Integer.valueOf(attributes[4].trim()));
                        car.setNoOfSeats(Integer.parseInt(attributes[5].trim()));
                        car.setSerialNumber(Long.parseLong(attributes[6].trim()));
                        car.setModelNumber(attributes[7].trim());
                        var cities =attributes[8].split(",");
                        List<String> Cities=new ArrayList<>();
                        for(String city: Cities){
                            if(city == "New Jersey" || city == "Boston"
                               || city=="Dallas" ||city == "Oregeon")
                               Cities.add(city);
                        }
                        car.setAvailableCities(Cities);
                        car.setMaintenanceCertDate(new Date(attributes[9].trim()));
                        line = br.readLine();
                        
                    }
                    else{
                        JOptionPane.showMessageDialog(this,"Entries in the file are incorrect");
                    }
                }
                JOptionPane.showMessageDialog(this,"File has been uploaded");
            
        }
        
        catch (Exception ex) {
                JOptionPane.showMessageDialog(this,"Error occured while reading the file.");
            }
        
        
    }//GEN-LAST:event_btnUploadFileActionPerformed
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox BostonCheckBox;
    private javax.swing.JLabel CarManufacturerjLabel;
    private javax.swing.JCheckBox DallasCheckBox;
    private com.toedter.calendar.JDateChooser JDateExp;
    private javax.swing.JButton ManufacturingDate;
    private javax.swing.JCheckBox NewJerseyCheckBox;
    private javax.swing.JCheckBox OregonCheckBox;
    private javax.swing.JLabel RegisterjLabel;
    private javax.swing.JButton Seats;
    private javax.swing.JButton SerialNo;
    private javax.swing.JButton Submit;
    private javax.swing.JRadioButton availabilityNo;
    private javax.swing.JRadioButton availabilityYes;
    private javax.swing.JButton btnUploadFile;
    private javax.swing.ButtonGroup buttonGroupRadioButtonsPassenger;
    private javax.swing.ButtonGroup buttonGroupavailability;
    private javax.swing.JButton carAvailability;
    private javax.swing.JButton carManufacturing;
    private javax.swing.JButton carName;
    private javax.swing.JButton cityAvailability;
    private javax.swing.JButton jButton2;
    private com.toedter.calendar.JYearChooser jYearChooser;
    private javax.swing.JComboBox<String> modelComboBox;
    private javax.swing.JButton modelNo;
    private javax.swing.JRadioButton noPassengerRadioButton;
    private javax.swing.JButton passengerCar;
    private javax.swing.JTextField txtCarManufacturer;
    private javax.swing.JTextField txtCarName;
    private javax.swing.JTextField txtNoOfSeats;
    private javax.swing.JTextField txtSerialNo;
    private javax.swing.JRadioButton yesPassengerRadioButton;
    // End of variables declaration//GEN-END:variables
}
